//
//  ItemsListPresenter.swift
//  Capsula
//
//  Created SherifShokry on 2/15/20.
//  Copyright © 2020 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//
import Foundation

class ItemsListPresenter : ViewToPresenterItemsListProtocol{
    
    var view: PresenterToViewItemsListProtocol?
    var interactor: PresenterToIntetractorItemsListProtocol?
    var router: PresenterToRouterItemsListProtocol?
    var itemsData = [Item]()
    var page : Int = 0
    var isFinishedPaging = false
    var storeId = -1
    var category: Category = Category()
    var specialItemsType = -1
    var numberOfRows : Int {
        return itemsData.count
    }
    var brand: Brand = Brand()
    
    func swipeToRefresh(){
        itemsData = []
        page = 0
        isFinishedPaging = false
        self.interactor?.emptyAllList()
        getItemsData()
    }
    
    func configureItemCell(cell: ItemCell, indexPath: IndexPath) {
        cell.setData(item: itemsData[indexPath.item])
        cell.addToCardPressed = { (selectedItem) in
            Utils.updateUserCart(list: [selectedItem]){
                if Utils.loadUser()?.accessToken ?? "" != "" {
                    self.view?.changeState(state: .loading)
                    self.interactor?.addItemsToCart(itemData: selectedItem)
                }
            }
            
        }
    }
    
    func getItemsData() {
        let count = itemsData.count
        page =  ( count / Constants.per_page ) + 1
        self.view?.changeState(state: .loading)
        self.interactor?.getItemsData(categoryId: category.categoryId ?? -1, storeId: storeId, page: page)
        
        //        if specialItemsType == -1 {
        //            if (category.categoryId ?? -1) == -1 {
        //                self.interactor?.getItemsData(brandId: brand.brandId ?? -1)
        //            }else{
        //                if storeId == -1 {
        //                        self.interactor?.getItemsData(categoryId: category.categoryId ?? -1)
        //                }else{
        //                    self.interactor?.getItemsData(categoryId: category.categoryId ?? -1, storeId: storeId)
        //                }
        //            }
        //        }else{
        //
        //            switch  specialItemsType {
        //            case 0:
        //                self.interactor?.getBestSellerItems()
        //                break
        //            case 1:
        //                self.interactor?.getTopRatingItems()
        //                break
        //            case 2:
        //                self.interactor?.getFreeDliveryItems()
        //                break
        //            default:
        //                print("No Thing")
        //            }
        //
        //        }
        
        
    }
    
    func loadPagingData(indexPath : IndexPath){
        let count = itemsData.count
        let newsCount = (count - 1)
        if indexPath.row == newsCount && !isFinishedPaging {
            self.getItemsData()
        }
    }
    
    func didSelectItem(indexPath: IndexPath) {
        if itemsData[indexPath.row].itemQuantity  == 0 {
            itemsData[indexPath.row].itemQuantity = 1
        }
        self.router?.openItemDetailsScreen(from: self.view, item: itemsData[indexPath.row])
    }
    
}

extension ItemsListPresenter : InteractorToPresenterItemsListProtocol {
    func itemsDataFetchedSuccessfully(itemsResponse: [Item]) {
        self.itemsData = itemsResponse
        self.view?.changeState(state: .ready)
    }
    
    func  itemsDataAddedToCartSuccessfully(itemsResponse: [Item]){
        var user =  Utils.loadUser()
        user?.user?.cartContent = itemsResponse
        Utils.saveUser(user: user ?? UserResponse())
        NotificationCenter.default.post(name: Notification.Name(Constants.CART_UPDATE_NOTIFICATION), object: nil)
        self.view?.changeState(state: .ready)
     }
    
    func itemsDataFailedToFetch(error: String) {
        self.view?.changeState(state: .error(error))
    }
    
    func stopPagination(){
        isFinishedPaging = true
    }
    
}

