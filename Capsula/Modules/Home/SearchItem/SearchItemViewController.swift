//
//  SearchItemViewController.swift
//  Capsula
//
//  Created SherifShokry on 2/24/20.
//  Copyright © 2020 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//
import UIKit
import KVNProgress
import ContentSheet
import Intercom


class SearchItemViewController: UIViewController {
    
    var presenter : ViewToPresenterSearchItemProtocol?
    var refreshControl = UIRefreshControl()
    @IBOutlet weak var headerView : UIView!
    @IBOutlet weak var searchField  : UITextField!
    @IBOutlet weak var collectionView : UICollectionView!
    @IBOutlet weak var cartView: UIView!
    @IBOutlet weak var checkOutBtn : UIButton!
    @IBOutlet weak var cartTotalPriceLabel : UILabel!
    @IBOutlet weak var cartNumberItemsLabel : UILabel!
    @IBOutlet weak var cartViewHeightConstraint : NSLayoutConstraint!
    
    
    
    var filterType = -1
    private var state: State = .loading {
        didSet {
            switch state {
            case .ready:
                KVNProgress.dismiss()
                refreshControl.endRefreshing()
                collectionView.reloadData()
            case .loading:
                if !refreshControl.isRefreshing{
                    KVNProgress.show(withStatus: "", on: self.view)
                }else{
                    collectionView.reloadData()
                }
            case .error(let error):
                KVNProgress.dismiss()
                refreshControl.endRefreshing()
                self.showMessage(error)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCollectionViewLayout()
        searchField.becomeFirstResponder()
        searchField.delegate = self
        NotificationCenter.default.addObserver(self, selector: #selector(self.recieveCartNotification(_:)), name: NSNotification.Name(rawValue: Constants.CART_UPDATE_NOTIFICATION), object: nil)
        updateCartView()
        //     self.presenter?.getItemsData()
    }
    
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if Utils.loadUser()?.accessToken ?? "" != "" {
            Intercom.setLauncherVisible(false)
        }
        
        if LocalizationSystem.sharedInstance.getLanguage() == "ar"{
            searchField.textAlignment = .right
        }else{
            searchField.textAlignment = .left
        }
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        headerView.clipsToBounds = true
        headerView.layer.cornerRadius = 70
        headerView.layer.maskedCorners = [.layerMinXMaxYCorner]
        cartView.clipsToBounds = true
        cartView.layer.cornerRadius = 20
        cartView.layer.maskedCorners = [.layerMaxXMinYCorner,.layerMinXMinYCorner]
    }
    
    
    func setupCollectionViewLayout(){
        collectionView.register(UINib.init(nibName: ItemCell.identifier, bundle: nil), forCellWithReuseIdentifier: ItemCell.identifier)
        
        refreshControl.addTarget(self, action: #selector(self.refresh(_:)), for: .valueChanged)
        collectionView.addSubview(refreshControl)
    }
    
    @objc func refresh(_ sender: AnyObject) {
        self.presenter?.swipeToRefresh()
    }
    
    
    @IBAction func filterItemPressed(_ sneder : UIButton){
        let content: ContentSheetContentProtocol
        let vc = FilterItemsViewController.instantiateFromStoryBoard(appStoryBoard: .Home)
        vc.filterType = filterType
        vc.applyFilterPressed = { filterType in
            self.filterType = filterType
            self.presenter?.setFilterType(type: filterType)
            self.presenter?.setSearchText(searchText: self.searchField.text ?? "")
            self.presenter?.itemsSearch()
        }
        let contentController = vc
        content = contentController
        let contentSheet = ContentSheet(content: content)
        contentSheet.blurBackground = false
        contentSheet.showDefaultHeader = false
        self.present(contentSheet, animated: true, completion: nil)
    }
    
    
    @IBAction func checkOutPressed(_ sender : UIButton){
        let cartList  =  Utils.loadLocalCart() ?? []
        
        if cartList.count > 0 {
            let vc = MainCartRouter.createModule()
            self.present(vc, animated: true, completion: nil)
        }else{
            self.showMessage(Strings.shared.cartMsg)
        }
    }
    
    @objc func recieveCartNotification(_ notification: NSNotification){
        updateCartView()
    }
    
    func updateCartView(){
        let cartItems = Utils.loadLocalCart() ?? []
        if (cartItems.count > 0){
            cartViewHeightConstraint.constant = 88
            cartView.isHidden = false
            cartNumberItemsLabel.text = "\(cartItems.count)"
        }else{
            cartViewHeightConstraint.constant = 0
            cartView.isHidden = true
        }
        view.layoutIfNeeded()
    }
    
    
    
    
}
extension SearchItemViewController : PresenterToViewSearchItemProtocol {
    func changeState(state: State) {
        self.state = state
    }
    
    func showPopup(message : String){
        self.showMessage(message)
    }
    
    
}

extension SearchItemViewController : UICollectionViewDelegate , UICollectionViewDataSource , UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.presenter?.numberOfRows ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell  = collectionView.dequeueReusableCell(withReuseIdentifier: ItemCell.identifier, for: indexPath) as! ItemCell
        self.presenter?.configureItemCell(cell: cell, indexPath: indexPath)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let collectionWidth = (self.collectionView.frame.width - 42) / 2
        return CGSize(width: collectionWidth, height: collectionWidth + 32)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 14, bottom: 0, right: 14)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.presenter?.didSelectItem(indexPath: indexPath)
    }
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        self.presenter?.loadPagingData(indexPath: indexPath)
    }
    
    
}

extension SearchItemViewController : UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        
        textField.resignFirstResponder()
        self.presenter?.setSearchText(searchText: textField.text ?? "")
        self.presenter?.emptyData()
        self.collectionView.reloadData()
        self.presenter?.itemsSearch()
        return true
    }
}
