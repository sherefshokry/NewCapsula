//
//  SideMenuPresenter.swift
//  Capsula
//
//  Created SherifShokry on 2/15/20.
//  Copyright © 2020 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import UIKit
import ContentSheet
import Intercom
class SideMenuPresenter : ViewToPresenterSideMenuProtocol{
    
    
    
    var view: PresenterToViewSideMenuProtocol?
    var interactor: PresenterToIntetractorSideMenuProtocol?
    var router: PresenterToRouterSideMenuProtocol?
    var sideMenuItems = [SideMenu]()
    
    
    var numberOfMenuElementsRows : Int {
        return sideMenuItems.count
    }
    
   
    
    func configureMenuElementCell(cell: SideMenuCell, indexPath: IndexPath) {
        cell.setData(sideMenuItem: sideMenuItems[indexPath.row])
    }
    
    func didSelectElement(itemIndex: Int) {
        //        let user = Utils.loadUser()
        //        if user != nil {
        //            self.interactor?.navigate(item: sideMenuItems[itemIndex])
        //        }else{
        //          //  self.interactor?.navigate(item: sideMenuItems[itemIndex])
        //        }
        
        self.interactor?.navigate(item: sideMenuItems[itemIndex])
    }
    
    func populateSideMenuList(sideMenuItems: [SideMenu]) {
        self.sideMenuItems = sideMenuItems
        self.view?.reloadData()
    }
    
    
    func viewDidLoad() {
        let isDeliveryMan = UserDefaults.standard.bool(forKey: "isDelivery")
        
        if isDeliveryMan {
            sideMenuItems =   self.interactor?.getSideMenuItemsForDeliveryMan() ?? []
        }else{
            if Utils.loadUser()?.accessToken ?? "" == "" {
                sideMenuItems = self.interactor?.getSideMenuItemsForGuestUser() ?? []
            }else{
                sideMenuItems = self.interactor?.getSideMenuItemsForUser() ?? []
            }
            
        }
        
        self.view?.reloadData()
    }
    
    func selectLanguage(){
        
        let currentLang = LocalizationSystem.sharedInstance.getLanguage()
        var  selectedLanguage  = ""
        if currentLang == "ar"{
            selectedLanguage = Strings.shared.arabic
        }else{
            selectedLanguage = Strings.shared.english
        }
        
        let picker = CustomPickerView()
        let langList = [Strings.shared.arabic , Strings.shared.english]
        
        if let index = langList.firstIndex(where: { (item) -> Bool in
            item ==  selectedLanguage
            // test if this is the item you're looking for
        }){
            picker.selectedIndex = index
        }else{
            picker.selectedIndex = -1
        }
        picker.titleText = Strings.shared.selectLanguage
        picker.subTitleText = ""
        picker.listSource = langList
        picker.doneSelectingAction = { index in
            self.changeLanguage(index: index)
        }
        picker.show()
    }
    
    
    
    func changeLanguage(index : Int){
        let currentLanguage = LocalizationSystem.sharedInstance.getLanguage()
        if index == 0 {
            Bundle.setLanguage("ar")
            Utils.setLang(lang: "ar")
        }else{
            Bundle.setLanguage("en")
            Utils.setLang(lang: "en")
        }
        let updatedLanguage =  UserDefaults.standard.string(forKey: "lang")
        //LocalizationSystem.sharedInstance.getLanguage()
        
        
        if currentLanguage != updatedLanguage {
            Utils.openSplashScreen()
        }
    }
    
    
    
    
    
}

extension SideMenuPresenter : InteractorToPresenterSideMenuProtocol {
    
    func logOut() {
           self.view?.changeState(state: .loading)
           self.interactor?.logOut()
       }
    
    func logOutSuccessfully() {
        self.view?.changeState(state: .ready)
        Intercom.logout()
        Utils.saveDeliveryUser(user: nil)
        Utils.saveUser(user: nil)
        Utils.openWelcomeScreen()
        Intercom.logout()
    }
    
    func failedToLogout(error: String) {
        self.view?.changeState(state: .error(error))
    }
    
    
    func navigate(viewController: UIViewController, animation: Bool) {
        self.router?.navigate(from: self.view, to: viewController, animation: animation)
    }
    
    
    func openPaymentScreen(){
        
        let content: ContentSheetContentProtocol
        let vc = ManagePaymentMethodVC.instantiateFromStoryBoard(appStoryBoard: .SideMenu)
        vc.applyPaymentMethod = { paymentType in
            
            
        }
        //              vc.paymentType = selectedPaymentMethod
        //              vc.applyPaymentMethod = { paymentType in
        //                  self.selectedPaymentMethod = paymentType
        //                  if paymentType == 1 {
        //                      self.selectedPaymentMethodLabel.text = Strings.cash
        //                  }else if paymentType == 5 {
        //                      self.selectedPaymentMethodLabel.text = Strings.madaPay
        //                  }else if paymentType == 4 {
        //                      self.selectedPaymentMethodLabel.text = Strings.creditCard
        //                  }
        //              }
        let contentController = vc
        content = contentController
        let contentSheet = ContentSheet(content: content)
        contentSheet.blurBackground = false
        contentSheet.showDefaultHeader = false
        UIApplication.shared.windows[0].visibleViewController?.present( contentSheet, animated: true, completion: nil)
        
    }
    
    
}

