//
//  ForgetPasswordViewController.swift
//  Capsula
//
//  Created SherifShokry on 12/25/19.
//  Copyright © 2019 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import KVNProgress
import Intercom

class ForgetPasswordViewController: UIViewController {
    
    var presenter : ViewToPresenterForgetPasswordProtocol?
    @IBOutlet weak var phoneField : CapsulaInputFeild!
    @IBOutlet weak var containerView : UIView!
    private var state: State = .loading {
           didSet {
               switch state {
               case .ready:
                   KVNProgress.dismiss()
               case .loading:
                    KVNProgress.show()
               case .error(let error):
                   KVNProgress.dismiss()
                   self.showMessage(error)
               }
           }
       }
      
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
       setupInputField()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        Intercom.setLauncherVisible(false)
    }
    
    override func viewWillLayoutSubviews() {
          super.viewWillLayoutSubviews()
          containerView.clipsToBounds = true
          containerView.layer.cornerRadius = 70
          containerView.layer.maskedCorners = [.layerMaxXMinYCorner]
      }
      
    
    func  setupInputField() {
        phoneField.type = .phoneNumber
        phoneField.setTextFeildSpecs()
     }
   
    func validate() -> Bool {
           var isValid = true
           isValid = phoneField.validate() && isValid
           return isValid
    }
     
    
    
    @IBAction func forgetPassword(_ sender : UIButton){
        
        if !validate(){
            return
        }
        
           self.presenter?.checkIfPhoneExist(phone: phoneField.getText())
        
    }
    
    
    
    
    
}
extension ForgetPasswordViewController : PresenterToViewForgetPasswordProtocol {
    
    func changeState(state: State) {
           self.state = state
       }
       
}
