//
//  MainRegisterInteractor.swift
//  Capsula
//
//  Created SherifShokry on 12/28/19.
//  Copyright © 2019 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Moya

class MainRegisterInteractor : PresenterToIntetractorMainRegisterProtocol {
    
    var presenter: InteractorToPresenterMainRegisterProtocol?
    private let provider = MoyaProvider<AuthDataSource>()
    
    func loginWithFacebook(token: String) {
        
        provider.request(.LogInWithfacebook(token)) { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success(let response):
                do {
                    let userResponse = try response.map(BaseResponse<UserResponse>.self).data ?? UserResponse()
                      if  userResponse.user?.phone ?? "" != ""  {
                                          Utils.saveUser(user: userResponse)
                                          Utils.updateUserCart(list : userResponse.user?.cartContent ?? []){
                                          }
                                      } 
                    UserDefaults.standard.set(false, forKey: "isDelivery")
                    self.presenter?.loggedInSuccussfully(userResponse: userResponse)
                } catch(let catchError) {
                    self.presenter?.failedToLogin(error: catchError.localizedDescription)
                }
            case .failure(let error):
                
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.failedToLogin(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.failedToLogin(error: error.localizedDescription)
                }
            }
        }
    }
    
    func loginWithApple(name: String, token: String) {
        provider.request(.LogInWithApple(name , token)) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                do {
                    let userResponse = try response.map(BaseResponse<UserResponse>.self).data ?? UserResponse()
                     
                    if  userResponse.user?.phone ?? "" != ""  {
                        Utils.saveUser(user: userResponse)
                        Utils.updateUserCart(list : userResponse.user?.cartContent ?? []){
                        }
                    }
                    
                    UserDefaults.standard.set(false, forKey: "isDelivery")
                    self.presenter?.loggedInSuccussfully(userResponse: userResponse)
                } catch(let catchError) {
                    
                    
                    self.presenter?.failedToLogin(error: catchError.localizedDescription)
                }
            case .failure(let error):
                
                
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.failedToLogin(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.failedToLogin(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    func loginWithGoogle(token: String) {
        
        provider.request(.LogInWithGoogle(token)) { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success(let response):
                do {
                    let userResponse = try response.map(BaseResponse<UserResponse>.self).data ?? UserResponse()
                    
                    
                  if  userResponse.user?.phone ?? "" != ""  {
                                        Utils.saveUser(user: userResponse)
                                        Utils.updateUserCart(list : userResponse.user?.cartContent ?? []){
                                        }
                                    }
                    UserDefaults.standard.set(false, forKey: "isDelivery")
                    self.presenter?.loggedInSuccussfully(userResponse: userResponse)
                } catch(let catchError) {
                    self.presenter?.failedToLogin(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.failedToLogin(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.failedToLogin(error: error.localizedDescription)
                }
            }
        }
    }
    
    func loginWithTwitter(token: String, secretKey: String) {
        provider.request(.LogInWithTwitter(token,secretKey)) { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success(let response):
                do {
                    let userResponse = try response.map(BaseResponse<UserResponse>.self).data ?? UserResponse()
                    Utils.saveUser(user: userResponse)
                    Utils.updateUserCart(list : userResponse.user?.cartContent ?? []){
                    }
                    UserDefaults.standard.set(false, forKey: "isDelivery")
                    self.presenter?.loggedInSuccussfully(userResponse: userResponse)
                } catch(let catchError) {
                    self.presenter?.failedToLogin(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.failedToLogin(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.failedToLogin(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    
}

