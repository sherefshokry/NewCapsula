//
//  VerificationInteractor.swift
//  Mansour
//
//  Created SherifShokry on 11/25/19.
//  Copyright © 2019 BlueCrunch. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Moya
class VerificationInteractor : PresenterToIntetractorVerificationProtocol {
    
    var presenter: InteractorToPresenterVerificationProtocol?
    
    
    func sendVerificationCode(phone : String) {
        
        let dataSource = VerificationDataSource()
        
        dataSource.sendVerificationSMS(phoneNumber: phone) { (response, result) in
            
            switch response {
            case .sucess :
                self.presenter?.codeSentSuccessfully()
                break
            case .networkError :
                self.presenter?.codeFailedToSent(error : result)
                break
            case .error :
                
                self.presenter?.codeFailedToSent(error : result)
                break
                
            }
            
        }
    }
    
    
    func verifyCode(code : String){
        let dataSource = VerificationDataSource()
        dataSource.verifyPhoneNumber(code: code) { (response, result) in
            
            switch response {
            case .sucess :
                self.presenter?.phoneNumberVerified(firebaseToken: result as? String ?? "")
                break
            case .networkError :
                self.presenter?.codeNotValid(error: result as? String ?? "")
                break
            case .error :
                
                self.presenter?.codeNotValid(error: result as? String ?? "")
                break
                
            }
       }
   }

    
    private let provider = MoyaProvider<AuthDataSource>()
    private let userProvider = MoyaProvider<UserDataSource>()
     
     func register(registerRequest: RegisterRequest) {
            provider.request(.Register(registerRequest)) { [weak self] result in
                   guard let self = self else { return }
                   switch result {
                   case .success(let response):
                       do {
                           let userResponse = try response.map(BaseResponse<UserResponse>.self).data ?? UserResponse()
                           Utils.saveUser(user: userResponse)
                        Utils.updateUserCart(list : userResponse.user?.cartContent ?? []){
                            
                        }
                    
                           self.presenter?.userRegisteredSuccessfully()
                       } catch(let catchError) {
                           self.presenter?.userFailedToRegister(error: catchError.localizedDescription)
                       }
                   case .failure(let error):
                    
                    
                       do{
                           if let body = try error.response?.mapJSON(){
                               let errorData = (body as! [String:Any])
                               self.presenter?.userFailedToRegister(error: (errorData["errors"] as? String) ?? "")
                           }
                       }catch{
                           self.presenter?.userFailedToRegister(error: error.localizedDescription)
                       }
                   }
               }
        }
        
    
    
    func completeProfile(registerRequest: RegisterRequest) {
        
        
        userProvider.request(.updateUser(registerRequest)) { [weak self] result in
                    guard let self = self else { return }
                    switch result {
                    case .success(let response):
                        do {
                            let userResponse = try response.map(BaseResponse<UserResponse>.self).data ?? UserResponse()
                            Utils.saveUser(user: userResponse)
                            self.presenter?.userRegisteredSuccessfully()
                        } catch(let catchError) {
                            self.presenter?.userFailedToRegister(error: catchError.localizedDescription)
                        }
                    case .failure(let error):
                        
                        
                        do{
                            if let body = try error.response?.mapJSON(){
                                let errorData = (body as! [String:Any])
                                self.presenter?.userFailedToRegister(error: (errorData["errors"] as? String) ?? "")
                            }
                        }catch{
                            self.presenter?.userFailedToRegister(error: error.localizedDescription)
                        }
                    }
                }
         }
    
    
    
    
}

