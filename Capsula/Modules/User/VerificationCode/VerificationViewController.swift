//
//  VerificationViewController.swift
//  Mansour
//
//  Created SherifShokry on 11/25/19.
//  Copyright © 2019 BlueCrunch. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import KVNProgress
import Intercom

class VerificationViewController: UIViewController {
    
    var presenter : ViewToPresenterVerificationProtocol?
    var counter = 60
    var timer = Timer()
    @IBOutlet weak var fieldsView: UIStackView!
    @IBOutlet weak var resendLabel: UILabel!
    @IBOutlet weak var sendAgainBtn: UIButton!
    @IBOutlet weak var codeField: UITextField!
    @IBOutlet weak var firstIndex: UITextField!
    @IBOutlet weak var secondIndex: UITextField!
    @IBOutlet weak var thirdIndex: UITextField!
    @IBOutlet weak var fourthIndex: UITextField!
    @IBOutlet weak var fifthIndex: UITextField!
    @IBOutlet weak var sixthIndex: UITextField!
    @IBOutlet weak var verificationErrorLabel: UILabel!
    @IBOutlet weak var containerView : UIView!
    
    private var state: State = .loading {
        didSet {
            switch state {
            case .ready:
                KVNProgress.dismiss()
            case .loading:
                KVNProgress.show()
            case .error(let error):
                KVNProgress.dismiss()
                self.showMessage(error)
            }
        }
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        hideKeyboardWhenTappedAround()
        setFields()
        self.presenter?.sendVerificationCode()
        self.showTimer()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        Intercom.setLauncherVisible(false)
    }
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        containerView.clipsToBounds = true
        containerView.layer.cornerRadius = 70
        containerView.layer.maskedCorners = [.layerMaxXMinYCorner]
    }
    
    
    func setFields(){
        fieldsView.semanticContentAttribute = .forceLeftToRight
        codeField.keyboardType = .asciiCapableNumberPad
        sendAgainBtn.setUnderLineText(text: Strings.shared.sendAgain)
        codeField.delegate = self
        codeField.addTarget(self, action: #selector(handleTextChange), for: .editingChanged)
    }
    
    
    func showTimer(){
        self.sendAgainBtn.isHidden = true
        self.timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(self.enableButton), userInfo: nil, repeats: true)
    }
    
    @objc func enableButton(){
        
        resendLabel.text = Strings.shared.resendMessage_1 + " \(counter) " + Strings.shared.resendMessage_2
        sendAgainBtn.isHidden = true
        counter -= 1
        if counter == -1 {
            sendAgainBtn.isHidden = false
            counter = 60
            timer.invalidate()
            resendLabel.text = ""
        }
    }
    
    
    @objc func handleTextChange(textField: UITextField){
        verificationErrorLabel.text = ""
        let code = textField.text as String?
        var startIndex = code?.startIndex
        let count = code?.count ?? 0
        if(count > 0)
        {
            firstIndex.text = String(code![startIndex!])
        }else{
            firstIndex.text = ""
        }
        
        if(count > 1)
        {
            startIndex = code?.index(after: startIndex!)
            secondIndex.text = String(code![startIndex!])
        }else{
            secondIndex.text = ""
        }
        
        if(count > 2)
        {
            startIndex = code?.index(after: startIndex!)
            thirdIndex.text = String(code![startIndex!])
        }else{
            thirdIndex.text = ""
        }
        
        if(count > 3)
        {
            startIndex = code?.index(after: startIndex!)
            fourthIndex.text = String(code![startIndex!])
        }else{
            fourthIndex.text = ""
        }
        if(count > 4)
        {
            startIndex = code?.index(after: startIndex!)
            fifthIndex.text = String(code![startIndex!])
        }else{
            fifthIndex.text = ""
        }
        if(count > 5)
        {
            startIndex = code?.index(after: startIndex!)
            sixthIndex.text = String(code![startIndex!])
        }else{
            sixthIndex.text = ""
        }
    }
    
    func clearAllFields() {
        firstIndex.text = ""
        secondIndex.text = ""
        thirdIndex.text = ""
        fourthIndex.text = ""
        fifthIndex.text = ""
        sixthIndex.text = ""
        codeField.text = ""
    }
    
    
    
    
    func validate()->Bool{
        var isValid = true
        isValid =  (codeField.text?.count ?? 0 == 6) && isValid
        return isValid
    }
    
    
    
    @IBAction func sendAgainPressed(_ sender : UIButton){
        clearAllFields()
        self.showTimer()
        self.presenter?.sendVerificationCode()
    }
    
    
    @IBAction func verifyPressed(_ sender : UIButton){
        if !validate(){
            if (codeField.text?.count ?? 0 == 0){
                verificationErrorLabel.text = Strings.Validation.shared.codeNullMsg
            }else{
                verificationErrorLabel.text = Strings.Validation.shared.codeValidation
            }
            return
        }
        self.view.endEditing(true)
        self.presenter?.verifyCode(code: codeField.text ?? "")
    }
    
    
}
extension VerificationViewController : PresenterToViewVerificationProtocol {
    func changeState(state: State) {
        self.state = state
    }
    
    
    
    
}
extension VerificationViewController : UITextFieldDelegate{
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool
    {
        let maxLength = 6
        let currentString: NSString = textField.text! as NSString
        let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
        //   textField.text = textField.text?.updateToEngNum()
        return newString.length <= maxLength
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    
}
